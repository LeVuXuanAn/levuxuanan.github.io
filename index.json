[
{
	"uri": "//localhost:1313/2-week2/2.2-module2/2.2.1-vpc/",
	"title": "Amazon Virtual Private Cloud",
	"tags": [],
	"description": "",
	"content": ""
},
{
	"uri": "//localhost:1313/1-week1/1.1-module1/1.1.1-awswaf/",
	"title": "AWS Well-Architected Framework",
	"tags": [],
	"description": "",
	"content": ""
},
{
	"uri": "//localhost:1313/",
	"title": "Minh Tien Workshop",
	"tags": [],
	"description": "",
	"content": "Introduce Overall This is where Minh Tien saves the knowledge, process and results of his internship at AWS in the summer of 2024.\nMinh Tien\u0026rsquo;s Worklog available here.\nContent Week 1 Week 2 Week 3 Week 4 Week 5 Week 6 "
},
{
	"uri": "//localhost:1313/1-week1/1.1-module1/",
	"title": "Module 1",
	"tags": [],
	"description": "",
	"content": ""
},
{
	"uri": "//localhost:1313/2-week2/2.1-sovico/",
	"title": "Sovico Skill Accelerator Lab",
	"tags": [],
	"description": "",
	"content": "Content VPC Fundamentals Multiple VPCs Security Controls Connecting to On-Premises Network Monitoring "
},
{
	"uri": "//localhost:1313/2-week2/2.1-sovico/2.1.1-vpc/",
	"title": "VPC Fundamentals",
	"tags": [],
	"description": "",
	"content": "Amazon VPC Amazon Virtual Private Cloud (Amazon VPC) enables you to launch AWS resources into a virtual network that you\u0026rsquo;ve defined. This virtual network closely resembles a traditional network that you\u0026rsquo;d operate in your own data center, with the benefits of using the scalable infrastructure of AWS.\nTo get started, navigate to the Your VPCs tab in the VPC section of the console and click Create VPC button.\nEnter VPC A as the Name tag Specify 10.0.0.0/16 as IPv4 CIDR block. Do not enable IPv6. Leave Default selected as Tenancy. Accept proposed Tags Click Create VPC After completing these steps, you should have a new VPC listed under Your VPCs\nClick on Actions and select Edit VPC settings from the dropdown\nCheck the box to enable DNS hostnames and select Save. Congratulations, your first VPC is now built\nSubnets A subnet is a range of IP addresses in your VPC. You can launch AWS resources into a specified subnet. Public subnets are for resources that must be connected to the internet, and private subnets for resources that won\u0026rsquo;t be exposed to the internet.\nIn this section we will create two public and two private subnets in each of two availability zones within your VPC.\nIn the VPC panel on the left click on Subnets Click on Create subnet button in the top right corner.\nChoose VPC A from the VPC ID dropdown.\nIn the Subnet settings section\nEnter the name as VPC A Public Subnet AZ1 Select the Availablity Zone of us-east-1a Enter a CIDR block of 10.0.0.0/24: Click Create subnet You should have a new subnet listed under Subnets.\nClick on Create subnet again\nUnder Subnet settings\nSelect VPC A Enter a name of VPC A Private Subnet AZ1 Select the Availablity Zone of us-east-1a Enter a CIDR block of 10.0.1.0/24 Click Create subnet Click on Create subnet again and\nSelect VPC A Enter a name VPC A Public Subnet AZ2 Select the Availablity Zone of us-east-1b Enter a CIDR block of 10.0.2.0/24 Click on Create subnet again and\nSelect VPC A Enter a name of VPC A Private Subnet AZ2 Select an Availablity Zone of us-east-1b Enter a CIDR block of 10.0.3.0/24: After you finish the task, on the resulting Subnets screen\nClear the subnet filter Sort by Name Confirm that four new subnets are available with names, CIDR blocks and Availabilty Zones as below Network ACLs A network access control list (ACL) is an optional layer of security for your VPC for controlling traffic in and out of one or more subnets.\nSelect any of the subnets, and scroll down to the Network ACL tab to look at the default NACL rules. Rules are evaluated in order from lowest to highest. If the traffic doesn’t match any rules, the * rule is applied, and the traffic is denied. Default NACLs allow all inbound and outbound traffic, as shown below, unless customized.\nCreate a new Network ACL for workload subnets in VPC A On the VPC Dashboard click on Network ACLs Click Create network ACL\nIn the Network ACL settings screen\nEnter a name of VPC A Workload Subnets NACL Select VPC A from the dropdown Click Create network ACL The result will be a new NACL for VPC A alongside the default NACL created when the VPC was created.\nIn the resulting Network ACLs screen\nSelect the checkbox for VPC A Workload Subnets NACL Scroll down to the Subnet associations tab Click Edit subnet associations In the Edit subnet associations screen\nSelect all four VPC A subnets to associate them with the NACL Click Save changes. The NACL should now be associated with four subnets on the following screen but because NACLs are created with only a DENY rule for inbound and outbound we will now change the default NACL rules to allow all traffic in both directions.\nIn the Network ACLs screen\nSelect the check box for VPC A Workload Subnets NACL for VPC A Scroll down and select the Inbound Rules tab below Notice that we have only DENY all rule Click Edit inbound rules In Edit inbound rules screen\nClick Add new rule Input 100 in Rule number Choose All traffic in Type Leave Source as 0.0.0.0/0 Click Save changes In the resulting screen you should have a success banner and a new Allow rule under the Inbound rules tab:\nNow follow the same steps described above for Inbound, but work on Outbound Rules tab of NACLs\nOn the Outbound Rules tab\nNote that we have only DENY all rule Click Edit outbound rules In the Edit outbound rules screen\nClick Add new rule Input 100 in Rule number Choose All traffic in Type Leave Destination as 0.0.0.0/0 Click Save changes On the resulting screen check that the rule has been added under the Outbound rules tab\nAllowing all traffic in and out of your subnets is not a good security posture. You can use NACLs to set broad rules and/or DENY rules, and then use Security Groups to create fine grained rules. For example, you can deny traffic from specific IPs with NACLs but not with Security Groups.\nWe will explore Network ACLs and Security Groups more in the Basic Security section.\nRoute Tables Your VPC has an implicit router, and you use route tables to control where network traffic is directed. Each subnet in your VPC must be associated with a route table, which controls the routing for the subnet (subnet route table). You can explicitly associate a subnet with a particular route table. Otherwise, the subnet is implicitly associated with the main route table. A subnet can only be associated with one route table at a time, but you can associate multiple subnets with the same subnet route table.\nCreate Route Table for Public Subnets In left hand panel of the VPC Dashboard click on Route Tables You will see the default route table that was created as part of the VPC creation, and in the Subnet Associations tab below the four subnets created earlier. We will now create a new public route table for the public subnets with a route to the internet via the Internet Gateway.\nAdd new public route table by clicking on Create route table in the right hand corner\nEnter VPC A Public Route Table as the name and select VPC A from the VPC dropdown\nClick Create route table and a new route table will be created\nAs you can see there is only a local route, so we\u0026rsquo;re going to enable internet access by adding a route to an Internet Gateway in a later step. For now we need to associate this public route table with the public subnets we created earlier.\nScroll down and click on the Subnet Associations tab\nClick on Edit subnet associations\nSelect VPC A Public Subnet AZ1 and VPC A Public Subnet AZ2 and click Save association\nThe two public subnets will now be associated with the public route table under Explicit Subnet Associations within the Subnet associations tab.\nCreate Route Table for Private Subnets In the left hand panel of the VPC Dashboard click on Route Tables and click on the Create route table button in the top right corner\nIn the Create route table screen * Enter VPC A Private Route Table as the Name * Select VPC A from the dropdown for VPC ID * Click on Create route table\nA new route table will be created with a local route\nWe\u0026rsquo;re going to enable outbound internet access by adding a route to the Internet via a NAT Gateway in the next step. For now we need to associate the private subnets to the route table.\nIn the Subnet Associations tab click on Edit subnet associations\nSelect the two private subnets VPC A Private Subnet AZ1 and VPC A Private Subnet AZ2 and click Save associations\nIn the resulting screen click on Route tables and confirm that there are three route tables under VPC A: main/default, Public and Private.\nInternet Connectivity In this section, we will deploy an Internet Gateway (IGW) and NAT Gateway into our VPC.\nAn Internet Gateway establishes outside connectivity for EC2 instances that will be deployed into the VPC and provides both inbound and outbound connectivity to workloads running in public subnets whereas a NAT Gateway provides outbound connectivity for workloads running in private subnets.\nDeploy an Internet Gateway In the left hand panel click on Internet Gateways and click on Create internet gateway\nEnter VPC A IGW as the name and click Create internet gateway in the bottom right corner\nOn the success screen for the newly created IGW and click on Attach to VPC:\nSelect VPC A from the dropdown list for Available VPCs and click Attach internet gateway\nThe Internet Gateway should attach successfully.\nWe now have an internet access point for our VPC, but in order to utilize the newly created Internet Gateway, we need to update VPC routing tables to point the default routes for our public subnets to this Internet Gateway.\nUpdate Route Table for Public Subnets In left hand panel of the VPC Dashboard click on Route Tables and select VPC A Public Route Table\nScroll down to the Routes tab\nAs you can see there is only a local route, so we\u0026rsquo;re going to enable internet access by adding a route to the Internet Gateway\nClick on Edit Routes\nIn the resulting screen\nClick on Add route Enter 0.0.0.0/0 in the Destination Select Internet Gateway from the Target dropdown Choose VPC A IGW\nClick Save changes and confirm that a new route has been added to the Routes tab\nNext we will add outbound connectivity from the private subnets by deploying a NAT Gateway in a public subnet for use by workloads that should not be directly exposed to the internet.\nCreate NAT Gateway In the left hand panel of the VPC Dashboard click on NAT Gateways and click on Create NAT gateway\nIn the Create NAT gateway screen * Enter VPC A NATGW as the name * Choose VPC A Public Subnet AZ1 * Click Allocate Elastic IP * Click Create NAT gateway\nUpon creation the NAT Gateway details are displayed\nIn this workshop, we only created one NAT Gateway in AZ1. It is best practice to create a NAT Gateway in each AZ that is utilized.\nUpdate Route Table for Private Subnets Now that we have a NAT Gateway in a public subnet we need to create a route to it from the private subnets and we will do that by adding an entry to the Route Table for the private subnets.\nIn the left hand panel of the VPC Dashboard click on Route Tables Select VPC A Private Route Table, scroll down to the Routes tab and click on Edit routes\nIn the Edit routes screen * Click on Add route * Enter 0.0.0.0/0 in the Destination * Select NAT Gateway from the Target dropdown\nChoose VPC A NATGW and click on Save changes\nConfirm the new route appears in the Routes tab of the resulting screen\nWe have now gone through the bread and butter of AWS networking and built a networking foundation of public and private subnets across two availability zones with internet access.\nVPC Endpoints VPC Endpoints are private links to supported AWS services from a VPC, instead of reaching the service\u0026rsquo;s public endpoints through the internet. Two types of VPC endpoints exist, Gateway endpoints and Interface endpoints.\nGateway endpoints support only S3 and DynamoDB, and reach these services through a gateway from the VPC.\nInterface endpoints create a network interface in the VPC\u0026rsquo;s subnets, and all traffic to the service flows through this interface to the service.\nPlease see What are VPC endpoints? in the Securely Access Services Over AWS PrivateLink whitepaper if you would like to learn more on the differences.\nCreate an Interface Endpoint for KMS Navigate to Endpoints with the VPC console and click on Create Endpoint to start creating a VPC Endpoint\nIn the Endpoint settings screen\nEnter VPC A KMS Endpoint as the Name tag Search for \u0026lsquo;kms\u0026rsquo; under Services From the results select the KMS service name without the\u0026rsquo;-fips\u0026rsquo; suffix\nIn the VPC section\nSelect VPC A from the dropdown Expand the Additional settings section Ensure that Enable DNS name is checked Select the IPv4 radio button Select VPC A Private Subnet AZ1 and VPC A Private Subnet AZ2 from the subnets and check the IPv4 radio button.\nSelect the default security group and leave the Policy as Full Access\nClick on Create endpoint button to create the VPC Endpoint for KMS in VPC A.\nClick on Close to return to the Endpoints screen.\nCreate a Gateway Endpoint for S3 Click \u0026lsquo;Create Endpoint\u0026rsquo; to start creating another VPC Endpoint\nIn the Create endpoint screen, enter VPC A S3 Endpoint search for \u0026lsquo;S3\u0026rsquo; by service name\nSelect the endpoint that has a \u0026ldquo;Type\u0026rdquo; listed as \u0026ldquo;Gateway\u0026rdquo; and in the drop down box for VPC\nSelect VPC A as the VPC and check the checkbox for all the route tables\nLeave the Policy as Full Access\nClick on Create endpoint button to create the VPC Endpoint for S3 attached to VPC A\nWe have now gone through the bread and butter of AWS networking and built a networking foundation of public and private subnets across two availability zones with internet access and private connectivity to AWS service endpoints.\nIn the next section we will launch an EC2 instance into both a public subnet and a private subnet to verify the connectivity.\nEC2 instances In this section, you will spin up EC2 instances in your VPC and protect them with a security group only allowing ICMP traffic to reach the hosts.\nLaunch an EC2 Instance into a Public Subnet In this section, you will create an EC2 instance in the Public Subnet of AZ2 (Availability Zone B). You will create the instance in AZ1 in the next section.\nIn the Instances section of the EC2 console click Launch Instances\nIn the resulting Launch an instance screen\nEnter VPC A Public AZ2 Server for the Name Ensure that Amazon Linux 2023 AMI will be selected, and the instance type is t2.micro. Under Key pair (login) select Proceed without a key pair. A key pair is not needed since we will be using Systems Manager to connect to the instances.\nUnder Network settings click Edit and\nSelect VPC A from the dropdown for the VPC field Select VPC A Public subnet AZ2 from the dropdown for the Subnet field Select Enable for the Auto-assign Public IP field Select Create security group with the name VPC A Security Group, description of Open-up ports for ICMP\nIn Inbound security groups rules under Type select All ICMP - IPv4 and enter 0.0.0.0/0 as the Source\nSince security groups are stateful, you don’t need to edit the outbound rules. The security group will allow the instance to respond to the ping since it saw the ping arrive at the instance.\nExpand Advanced network configuration and under Primary IP enter 10.0.2.100.\nAt the bottom of the section\nExpand Advanced details Under IAM Instance profile select NetworkingWorkshopInstanceProfile which was created in the pre-requisites section. Click Launch instance Click View all instances\nIf you just finished the last step, your EC2 instance might still be spinning up. You can tell by looking at the Instance State and Status Checks columns. If you see Pending state or status Initializing, the instance is not ready yet. After few minutes, you should have an EC2 instance in the \u0026ldquo;running\u0026rdquo; state.\nCongratulations! You have just launched a virtual server in your public subnet in AZ2.\nLaunch Instance in Private Subnet You could follow the same process in the last two sections in order to deploy an EC2 instance into a private subnet, however it is also possible to launch a new instance using the same settings as previously.\nIn the Instances section of the EC2 console Select the running public instance VPC A Public AZ2 Server Click Actions then Image and templates then Launch more like this In the settings screen Update the Name to VPC A Private AZ1 Server Under Key pair (login) select Proceed without a key pair. Update the Subnet to be VPC A Private Subnet AZ1 Set the Auto-Assign Public IP setting to Disable. Expand Advanced network configuration and under Primary IP enter 10.0.1.100. Click Launch instance Click View all instances. There should now be two EC2 instances running in the VPC Congratulations, you now have an EC2 instance running in both a public and private subnet.\nTest Connectivity In this section, you will use the EC2 instances in the public and private subnets of your VPC to test the connectivity for the network foundations you created in the previous section.\nIn the Instances section of the EC2 console\nSelect the VPC A Public AZ2 Server instance Scroll down to the Details tab Copy the Public IPv4 address field by clicking the copy icon to the left of it To ping the instance, you need to open your CLI. On Windows, open the Command Prompt. On Mac, open the Terminal.\nType ping then a space, then paste the Elastic IP from above, then space then -c 5 and enter.\nIf the instance is reachable, we expect to see lines appearing such as\nGood job! You have successfully confirmed connectivity between the public EC2 instance and the internet.\nTest Private Instance Connectivity In the Instances section of the EC2 console\nSelect the VPC A Private AZ1 Server instance Click on the Connect button In the following screen, select the Session Manager tab and click Connect\nThis will open a terminal from which you can test connectivity to both the public instance at 10.0.2.100 and external connectivity to example.com via the NAT Gateway.\nCopy the following ping commands and paste in the Session Manager console\nping 10.0.2.100 -c 5 ping example.com -c 5 You should receive responses both from the public EC2 instance and example.com\nIf the ping to 10.0.2.100 is not successful, please ensure you correctly configured the IP address in the EC2 Instances section\nCongratulations you have now confirmed outbound connectivity from both instances\nCompare Gateway and Interface Endpoint Approaches Interface Endpoint DNS Type the following to check the DNS for the KMS service from the VPC A instance: dig kms.us-east-1.amazonaws.com The response should point to two local IP addresses within the VPC A private subnet CIDR blocks of 10.0.1.0/24 and 10.0.3.0/24\nBecause the VPC DNS is returning the IP addresses for the Elastic Network Interfaces placed into the private subnets by the Interface Endpoint rather than the public IP address for KMS, the traffic to KMS from VPC A will be routed to the VPC Endpoint rather than traversing the internet to reach KMS.\nTerminate the Session Manager session. Gateway Endpoint Routing Navigate to the VPC console, and select Route Tables Select the check box next to VPC A Private Route Table and scroll down to the Routes tab. It should show an entry pointing to the VPC Endpoint ID for destinations in the prefix list.\nBecause the S3 prefix list is a more specific route to S3 than the default route to the internet the traffic to S3 from VPC A will be routed to the VPC Endpoint rather than traversing the internet to the public S3 endpoint.\nWe have created VPC Endpoints for S3 and KMS and confirmed that the local route table pointed to the VPC endpoint for S3 whereas the local DNS entry for KMS now pointed to ENIs in the private subnets rather than the public interface.\nClean Up If you are using your own AWS Account to conduct this workshop and you are finished, complete the follow steps to clean up.\nWarning\nYou should only complete this clean up section if you do not plan on continuing with this workshop.\nMake sure you terminate / delete the resources below to avoid unnecessary charges.\nTerminate EC2 instances Step-by-step to delete VPC A Public AZ2 Server and VPC A Private AZ1 Server\nDelete the VPC Endpoints Step-by-step to delete the KMS and S3 VPC Endpoints\nDelete the VPC Step-by-step to delete VPC A\nDelete the Prerequisites CloudFormation Stack Step-by-step to delete the CloudFormation stack\nFinished Once you have completed the above steps, you are finished. If you want to continue the workshop later, you can skip this step and use the CloudFormation template in the next step to build the prerequisites.\n"
},
{
	"uri": "//localhost:1313/1-week1/",
	"title": "Week 1",
	"tags": [],
	"description": "",
	"content": "Introduce First week at AWS.\nContent Module 1 Lab 1 Lab 7 Lab 9 "
},
{
	"uri": "//localhost:1313/1-week1/1.2-lab1/",
	"title": "Lab 1",
	"tags": [],
	"description": "",
	"content": ""
},
{
	"uri": "//localhost:1313/2-week2/2.2-module2/",
	"title": "Module 2",
	"tags": [],
	"description": "",
	"content": "This article notes the knowledge gained from 2 videos on the topic Module02.\nContent Amazon Virtual Private Cloud VPC Security and Multi-VPC features "
},
{
	"uri": "//localhost:1313/2-week2/2.1-sovico/2.1.2-multivpcs/",
	"title": "Multiple VPCs",
	"tags": [],
	"description": "",
	"content": "VPC Peering \u0026amp; Transit Gateway Overview A VPC peering connection is a networking connection between two VPCs that enables you to route traffic between them using private IPv4 addresses or IPv6 addresses. Instances in either VPC can communicate with each other as if they are within the same network. You can create a VPC peering connection between your own VPCs, or with a VPC in another AWS account. The VPCs can be in different regions (also known as an inter-region VPC peering connection).\nVPC Peering is a useful approach to connect a small number of pairs of VPCs however managing point-to-point connectivity across many VPCs without the ability to centrally manage the connectivity policies, can be operationally costly and cumbersome. For on-premises connectivity, you need to attach your AWS VPN to each individual VPC. This solution can be time consuming to build and hard to manage when the number of VPCs grows into the hundreds.\nAWS Transit Gateway is a service that enables you to connect VPCs and on-premises networks to a single gateway. As you grow the number of workloads running on AWS, you need to be able to scale your networks across multiple accounts and Amazon VPCs to keep up with the growth.\nIn this lab, you will learn how to peer VPCs, and also create a Transit Gateway, attach VPCs, and configure routing with the Transit Gateway route tables.\nIf you are running this lab in AWS Workshop Studio, the region has been set by your facilitator. The region you see in /images/2.week2/screenshots may not match your environment. This will not cause any problems.\nIf you are running this lab in your own AWS Account, it is recommended for all lab resources to be created in us-east-1 region so that the /images/2.week2/screenshots match your environment. This is not mandatory.\nFor this lab we will use CloudFormation to automatically build VPCs.\nPrerequisites If you have not completed the VPC Fundamentals section\u0026hellip;\n-or-\nIf you have completed the VPC Fundamentals section\u0026hellip;\nIf you have completed the VPC Fundamentals lab and already have one VPC set up then load this CloudFormation template to create two additional VPCs: Create two additional VPCs\nNavigate to CloudFormation section in the AWS console. Click Create stack button and select With new resources (standard).\nUnder Specify template, select Upload a template file, click Choose file and select the CloudFormation template that you downloaded above. Click Next.\nEnter the Stack name NetworkingWorkshopMultiVPC. Update the Parameter ParticipantIPAddress. Leave the other parameter defaults unchanged if you are running in us-east-1 and click Next. If you are running in another region, update the availability zones. Scroll to the bottom of the Configure stack options page and click Next again.\nScroll to the bottom of the Review page and click the Submit button.\nThe CloudFormation will begin deployment which you can follow by refreshing the Events and Resources tab.\nOnce the CloudFormation template finishes lets go take a look at what it created. Click on the resources tab and you will find all the resources that were built as part of the CloudFormation stack.\nImportant\nIf the deployment of the CloudFormation template fails with the error that starts with Value (NetworkingWorkshopInstanceProfile) for parameter iamInstanceProfile.name is invalid., please make sure you have completed the prerequisites section.\nIf the deployment of the CloudFormation template fails due to the Elastic IP address limit being reached and you are using your own AWS account, please refer to the Elastic IP Quota section in Prerequisites - Your own AWS Account.\nNow go to Your VPCs and take a look.\nYou will find two new VPCs VPC A, VPC B and VPC C with CIDR blocks of 10.0.0.0/16, 10.1.0.0/16 and 10.2.0.0/16. Each VPC has two public and two private subnets.\nEach VPC has an EC2 instance in the private subnet located in the us-east-1a availability zone.\nThe environment now looks something like the following. You may notice that VPC A is missing the TGW subnets. You will be creating these in the Transit Gateway section. VPC Peering Please note, this section is optional and is not required to be completed to proceed with this workshop. You may skip to Transit Gateway\nA VPC peering connection is a networking connection between two VPCs that enables you to route traffic between them using private IPv4 addresses or IPv6 addresses. In this lab, we will establish VPC peering connections between VPC A and VPC B, as well as between VPC A and VPC C and show that traffic flows between only those VPCs with direct peering links.\nNote that all three VPCs have non-overlapping CIDRs. You cannot create a VPC peering connection between VPCs with matching or overlapping IPv4 CIDR blocks.\nSetup VPC A and VPC B Peering Create the Peering Connection Between VPCs A \u0026amp; B In the VPC Dashboard click on Peering Connections Click on Create peering connection in the right hand corner\nSpecify the Peering connection name as VPC A \u0026lt;\u0026gt; VPC B\nUnder Select a local VPC to peer with select VPC A as VPC ID (Requester)\nUnder Select another VPC to peer with ensure that My Account is selected for Account\nFor Region select the region for this workshop This Region (us-east-1).\nFor VPC ID (Accepter) select VPC B\nClick on Create peering connection The newly created peering connection will be in Pending Acceptance state.\nOn the resulting screen, navigate under Actions and click Accept request\nOn the following pop-select, click Accept request Click on Modify my route tables now in the resulting screen Update Route Table in VPC A Select the check box for the VPC A Private Route Table\nScroll down and click on Routes tab\nClick Edit routes Add route entry for \u0026ldquo;VPC B\u0026rdquo; using the CIDR range 10.1.0.0/16 and selecting Peering Connection VPC A \u0026lt;\u0026gt; VPC B for the target Click Save changes\nConfirm that the new route appears in the Routes tab of the resulting screen\nUpdate Route Table in VPC B Click on Route tables\nSelect check box for VPC B Private Route Table\nClick on Routes tab\nClick Edit routes\nAdd a route entry for VPC A using CIDR range 10.0.0.0/16 as the Destination and VPC A \u0026lt;\u0026gt; VPC B as the target Click Save changes\nThe route table will be updated with routes for the peering connection\nSetup VPC A and VPC C Peering Create the Peering Connection Between VPCs A \u0026amp; C In the VPC Dashboard click on Peering Connections Click on Create peering connection in the right hand corner\nSpecify the Peering connection name as VPC A \u0026lt;\u0026gt; VPC C\nUnder Select a local VPC to peer with select VPC A as VPC ID (Requester)\nUnder Select another VPC to peer with ensure that My Account is selected for Account\nFor Region select the region for this workshop This Region (us-east-1).\nFor VPC ID (Accepter) select VPC C\nClick on Create peering connection The newly created peering connection will be in Pending Acceptance state.\nOn the resulting screen, navigate under Actions and click Accept request\nOn the following pop-select, click Accept request\nClick on Modify my route tables now in the resulting screen\nUpdate Route Table in VPC A Select check box for VPC A Private Route Table\nScroll down and click on Routes tab\nClick Edit routes\nAdd route entry for \u0026ldquo;VPC C\u0026rdquo; using the CIDR range 10.2.0.0/16 and selecting Peering Connection VPC A \u0026lt;\u0026gt; VPC C for the target\nClick Save changes\nConfirm that the new route appears in the Routes tab of the resulting screen Update Route Table in VPC C Navigate back to Route Tables and select check box for VPC C Private Route Table\nClick on Routes tab\nClick Edit routes\nAdd a route entry for VPC A using CIDR range 10.0.0.0/16 as the Destination and VPC A \u0026lt;\u0026gt; VPC C as the Target Click Save changes\nThe route table will be updated with routes for the peering connection\nCheck Connectivity Check Connectivity from VPC A Proceed to EC2 Console .\nSelect the VPC A Private AZ1 Server EC2 instance and click the Connect button above\nClick Connect in the Session Manager tab\nTry pinging EC2 instances in VPC B and VPC C using the private addresses of the instances\nping 10.1.1.100 -c 5 ping 10.2.1.100 -c 5 If peering and routing are configured correctly, you should be able to ping both instances. Check Connectivity from VPC B Terminate the Session Manager connection and in the resulting screen click on Instances .\nSelect VPC B Private AZ1 Server EC2 instance and connect using Session Manager.\nPing the EC2 instance in VPC A using the IP address 10.0.1.100 ping 10.0.1.100 -c 5 Can you ping the instance in VPC C using the IP address 10.2.1.100? ping 10.2.1.100 -c 5 There is no direct peering between VPC B and VPC C. VPC B and VPC C cannot communicate via VPC A because VPC peering does not permit transitive routing.\nTerminate the Session Manager connection and close the browser tab. Congratulations you\u0026rsquo;ve set up a peering architecture that connects VPC A to VPC B and VPC C but prevents VPC B and VPC C communicating.\nWhile this approach can be used to interconnect many VPCs, managing many point-to-point connections can be cumbersome at scale. A more scalable approach is to utilize AWS Transit Gateway so we will now remove the point-to-point peering connections between VPCs in preparation for setting up Transit Gateway (TGW) to interconnect the three VPCs\nDelete VPC Peering Connections In the VPC Dashboard navigate to Peering Connections Select the VPC A \u0026lt;\u0026gt; VPC B peering connectoin and delete it by clicking Actions and selecting Delete peering connnection\nSelect the checkbox to Delete related route table entries to avoid traffic blackholing scenario. Type delete in the text box and click Delete\nRepeat deletion of VPC peering for the VPC A \u0026lt;\u0026gt; VPC C connection.\nCongratulations you now have now completed this section of the lab.\nTransit Gateway AWS Transit Gateway connects your Amazon Virtual Private Clouds (VPCs) and on-premises networks through a central hub. This simplifies your network and puts an end to complex peering relationships. It acts as a cloud router – each new connection is only made once.\nCreate the Transit Gateway In the left hand pane of the VPC Dashboard scroll down and click on Transit Gateways Click on Create Transit Gateway\nAdd a name for the new Transit Gateway as TGW and add a description of TGW for us-east-1. Select Multicast support and keep the remaining settings at the defaults. You will need this option enabled if you progress to the advanced multicast lab. Click on Create transit gateway. Attach VPCs to Transit Gateway The best practice for connecting VPCs to Transit Gateway is to use a dedicated /28 subnet in each availability zone and the CloudFormation run earlier created these for VPC B and VPC C alongside two private and public /24 subnets for hosting workloads.\nHowever the \u0026ldquo;VPC Fundamentals\u0026rdquo; lab only created the two public and two private /24 subnets for VPC A and our AWS environment currently looks like this:\nTherefore before we create the transit gateway we need to add a dedicated /28 subnet in each availability zone in VPC A for the transit gateway attachments.\nCreate Transit Gateway Subnets in VPC A Within the VPC Dashboard click on Subnets and click the Create subnet button\nCreate a subnet under VPC A with a name of VPC A TGW Subnet AZ1 in us-east-1a with a CIDR block of 10.0.5.0/28\nCreate another subnet under VPC A with a name of VPC A TGW Subnet AZ2 in us-east-1b with a CIDR block of 10.0.5.16/28\nNow that we have subnets to place the transit gateway attachments into we will attach VPC A, VPC B, and VPC C to the transit gateway and test connectivity between our EC2 instances in each VPC.\nCreate Transit Gateway Attachment for VPC A On the left navigation pane go to Transit Gateway Attachments Click on Create Transit Gateway Attachment.\nEnter VPC A Attachment as the Name tag.\nSelect the transit gateway from the dropdown for Transit Gateway ID.\nLeave Attachment Type as VPC\nSelect VPC A from the VPC ID drop down.\nSelect VPC A TGW Subnet AZ1 and VPC A TGW Subnet AZ2 for the Subnet IDs.\nNote that the TGW subnets will not be selected by default, double check the subnets are the TGW ones.\nClick Create transit gateway attachment on the bottom right corner.\nVPC attachment should create successfully and will be in a pending state initially\nCreate Transit Gateway Attachment for VPC B Click Create Transit Gateway Attachment.\nEnter VPC B Attachment as the Name tag.\nSelect the transit gateway from the dropdown for Transit Gateway ID.\nLeave Attachment Type as VPC\nSelect VPC B from the VPC ID drop down\nSelect VPC B TGW Subnet AZ1 and VPC B TGW Subnet AZ2 for the Subnet IDs.\nNote that the TGW subnets will not be selected by default, double check the subnets are the TGW ones.\nClick Create transit gateway attachment on the bottom right corner.\nVPC attachment should create successfully and will be in a pending state initially\nCreate Transit Gateway Attachment for VPC C Click Create Transit Gateway Attachment.\nName the attachment as VPC C attachment.\nSelect the transit gateway from the dropdown for Transit Gateway ID.\nLeave Attachment Type as VPC\nSelect VPC C from the VPC ID drop dowm.\nSelect VPC C TGW Subnet AZ1 and VPC C TGW Subnet AZ2 for the Subnet IDs.\nNote that the TGW subnets will not be selected by default, double check the subnets are the TGW ones.\nClick Create transit gateway attachment on the bottom right corner.\nVPC attachment should create successfully and will be in a pending state initially\nLet’s go take a look at how the Transit Gateway attached to the VPC.\nOn the left in the EC2 Dashboard click on Network Interfaces There are now six interfaces with a Description beginning Network Interface for Transit Gateway Attachment... representing the Elastic Network Interfaces that have been placed in each of the two Transit Gateway subnets in each of the three VPCs.\nNow that we have attachments in all three VPCs, we need to add routes to their route tables to point traffic to the interfaces.\nAdd Routes to TGW in the VPC Route Tables On the left in the VPC Dashboard click on Route Tables Select the check box for VPC A Private Route Table, scroll down select the Routes tab and click on Edit routes. Add a route to VPC B in the VPC A Private Route Table using a Destination of 10.1.0.0/16 with a Target as the transit gateway.\nAdd a route to VPC C in the VPC A Private Route Table using a Destination of 10.2.0.0/16 with a Target as the transit gateway.\nClick Save routes.\nConfirm that the routes have been added to the route table. Click on Route tables\nSelect the check box for VPC B Private Route Table, scroll down select the Routes tab and click on Edit routes.\nAdd an aggregate route with a Destination of 10.0.0.0/8 with a Target as the transit gateway. Click Save routes. Confirm that the route has been added to the VPC B Private Route Table. Click on Route tables\nSelect the check box for VPC C Private Route Table, scroll down select the Routes tab and click on Edit routes.\nAdd an aggregate route with a Destination of 10.0.0.0/8 with a Target as the transit gateway. Click Save routes. Confirm that the route has been added to the VPC C Private Route Table. Test Connectivity Now let’s test the connectivity between the instances in the private subnets in VPC A, B \u0026amp; C.\nNavigate to Instances in the EC2 Dashboard\nSelect the check box for VPC A Private AZ1 Server and click Connect to use Session Manager to connect Confirm connectivity between the VPCs by pinging the IP address on the instances in VPC B and VPC C with the following commands: ping 10.1.1.100 -c 5 ping 10.2.1.100 -c 5 You should see a response from both EC2 instances Congratulations you now have a multi-VPC architecture with connectivity between the VPCs provided by Transit Gateway.\nTGW Route Tables Your transit gateway routes IPv4 and IPv6 packets between attachments using transit gateway route tables. You can configure these route tables to propagate routes from the route tables for the attached VPCs, VPN connections, and Direct Connect gateways. You can also add static routes to the transit gateway route tables. When a packet comes from one attachment, it is routed to another attachment using the route that matches the destination IP address.\nIn this section we will explore using transit gateway route tables to provide network segmentation.\nInspect the Transit Gateway Default Route Table In the VPC Dashboard scroll down and click Transit Gateway Route Tables Select the Transit Gateway route table, scroll down and click on the Associations Tab. You will see the three attachments for the three VPCs. Next click on the Propagations Tab. You will see all three attachments are propogating the CIDRs for the VPCs. Finally click on the Routes Tab. You will see the three routes for the three VPCs. As we have seen the Transit Gateway automatically associates newly attached VPCs to the default route table and propagates routes from the VPCs into the Transit Gateway Route Table. This makes it very easy for VPCs to have connectivity to other VPCs. But there are often times when we do not want VPCs to have connectivity to other VPCs except for a Shared Services VPC. For this lab we will use VPC A as our Shared Services VPC and modify the default configurations on the Transit Gateway route table and make it so that VPC B and VPC C cannot talk to each other but both are able to communicate with any shared services in VPC A. This is a typical ‘shared services’ VPC configuration in which VPC A would host services like LDAP, DNS, or other shared resources.\nDelete VPC A Attachment from Transit Gateway Route Table The first thing we need to do is delete the association for VPC A from the original Transit Gateway Route Table that you created. You need to reference the VPC ‘Resource ID’ to ensure you delete the correct VPC\nNavigate to Your VPCs and make a note of the VPC ID for VPC A. Navigate back to Transit Gateway Route Tables Select the check box for the TGW route table and scroll down to the Associations tab Select the association with the Resource ID that matches the VPC ID for VPC A noted down earlier and click Delete association Confirm the deletion by clicking Delete Association on the following screen The association will move into disassociating state. Delete Propagations for VPC B \u0026amp; C from Transit Gateway Route Table We will now delete the propagations that were automatically created for both VPC B and VPC C one at a time from the route table so that the only one remaining is that for the VPC ID of VPC A. This will remove the routes for VPC B and VPC C so they cannot reach each other via this route table.\nNavigate to the Propagations tab.\nSelect one of the propagations where the Resource ID does NOT match the VPC ID noted down for VPC A and click Delete Propagation Confirm the deletion by clicking Delete propagation on the pop-up. Select the other propagation where the Resource ID does NOT match the VPC ID for VPC A and click Delete Propagation Confirm the deletion by clicking Delete propagation on the pop-up. Navigate to the Routes tab to check the result (it may take a few seconds to update) The only route in the original Transit Gateway Route Table should be a propagated route to 10.0.0.0/16 to VPC A.\nThe attachments for both VPC B and VPC C are still associated to the original route table and this means that both VPC B and VPC C are able to reach VPC A via the route table as there is a route for 10.0.0.0/16 being propagated into it by VPC A.\nHowever the attachment for VPC A is no longer associated to a route table in the TGW and therefore there is no routing information that would allow traffic to reach VPC B and VPC C from VPC A. To add those routes we will now create another route table for VPC A to use.\nCreate Shared Services Route Table To create a return path from VPC A we will create a new Shared Services Route Table.\nClick Create Transit Gateway Route Table Enter Shared Services TGW Route Table as the Name tag and select the transit gateway from the dropdown for Transit Gateway ID Click Create transit gateway route table* and wait for the new route table to change state to available Scroll down to the Associations tab and click Create association Associate the VPC A attachment with the Shared Services route table by selecting it from the dropdown and clicking Create association. Create Propagations for VPC B \u0026amp; VPC C Now that VPC A is associated with the new Shared Services Route Table in the Transit Gateway we need to create propagations for VPC B and VPC C so that this route table knows how to access 10.1.0.0/16 and 10.2.0.0/16. This enables VPC A to have a return path to both VPC B and VPC C.\nNavigate to Propagations tab and click Create Propagation. Select the VPC B attachment from the dropdown and click Create propagation There should now be two propagations in the Propagations tab Take a look at the Routes tab for the shared services route table. There should be routes to both VPC B (10.1.0.0/16) and VPC C (10.2.0.0/16).\nTest Connectivity Now let’s use Session Manager to connect to the EC2 instance in VPC B and test connectivity to the instances in VPC A and VPC C.\nIn the EC2 Dashboard click on EC2 Instances Select VPC B Private AZ1 Server and Click Connect In the Session Manager tab, click Connect Ping the servers in VPC A 10.0.1.100 and VPC C 10.2.1.100 ping 10.0.1.100 -c 5 ping 10.2.1.100 -c 5 sh-4.2$ ping 10.0.1.100 -c 5 PING 10.0.1.100 (10.0.1.100) 56(84) bytes of data. 64 bytes from 10.0.1.100: icmp_seq=1 ttl=254 time=1.002 ms 64 bytes from 10.0.1.100: icmp_seq=2 ttl=254 time=0.909 ms 64 bytes from 10.0.1.100: icmp_seq=3 ttl=254 time=0.908 ms 64 bytes from 10.0.1.100: icmp_seq=4 ttl=254 time=0.896 ms 64 bytes from 10.0.1.100: icmp_seq=5 ttl=254 time=0.903 ms --- 10.0.1.100 ping statistics --- 5 packets transmitted, 5 received, 0% packet loss, time 4004ms rtt min/avg/max/mdev = 0.896/1.128/2.024/0.448 ms sh-4.2$ ping 10.2.1.100 -c 5 PING 10.2.1.100 (10.2.1.100) 56(84) bytes of data. --- 10.2.1.100 ping statistics --- 5 packets transmitted, 0 received, 100% packet loss, time 4072ms sh-4.2$ Now because we deleted the association in the main route table VPC B can talk to VPC A, but VPC B cannot talk to VPC C.\nCongratulations you\u0026rsquo;ve established network segmentation using the Transit Gateway route tables and completed the lab.\nClean Up If you are using your own AWS Account to conduct this workshop and you are finished, complete the follow steps to clean up.\nWarning\nYou should only complete this clean up section if you do not plan on continuing with this workshop.\nMake sure you terminate / delete the resources below to avoid unnecessary charges.\nDelete Transit Gateway and attachments Delete the remaining resources Finished Once you have completed the above steps, you are finished. If you want to continue the workshop later, you can skip this step and use the CloudFormation template in the next step to build the prerequisites.\n"
},
{
	"uri": "//localhost:1313/2-week2/2.2-module2/2.2.2-vpcsec-multivpcs/",
	"title": "VPC Security and Multi-VPC features",
	"tags": [],
	"description": "",
	"content": ""
},
{
	"uri": "//localhost:1313/2-week2/",
	"title": "Week 2",
	"tags": [],
	"description": "",
	"content": "Content Sovico lab Module 2 Optimizing AWS Cost and Security "
},
{
	"uri": "//localhost:1313/1-week1/1.3-lab7/",
	"title": "Lab 7",
	"tags": [],
	"description": "",
	"content": ""
},
{
	"uri": "//localhost:1313/2-week2/2.3-gapvxawsevent/",
	"title": "OPTIMIZING AWS COSTS AND SECURITY",
	"tags": [],
	"description": "",
	"content": ""
},
{
	"uri": "//localhost:1313/2-week2/2.1-sovico/2.1.3-securitycontrols/",
	"title": "Security Controls",
	"tags": [],
	"description": "",
	"content": "Network ACLs Network ACLs are stateless access controls you configure at a subnet level, to allow or block a CIDR block on a particular port or range of ports. Network ACL rules are numbered list and evaluated top down, with a DENY ALL at the end. If a rule is matched, subsequent rules are not evaluated.\nBoth inbound and outbound traffic can be controlled with these rules. By default when you create subnets, they will be attached to the default Network ACL which has an ALLOW ALL rule for both inbound and outbound traffic.\nIn this section, we will modify the Network ACL associated with the workload subnets in VPC A to only ICMP traffic from VPC B\u0026rsquo;s CIDR; and test connectivity from VPC A to VPC C, and test other connectivity from VPC B to VPC C as well.\nDefault NACL Configuration VPC A In the VPC Dashboard click on Network ACLs Select the check box for VPC A Workload Subnets NACL Click on the Inbound Rules tab below to view existing inbound rules All traffic is evaluated for Protocol, Port and Source IP match. In this Network ACL, all traffic is allowed into the VPC A Public and Private Subnets by the first rule. The second rule which is a DENY ALL is not evaluated.\nWe will now modify the first rule (100) to allow only ICMP traffic from VPC B\u0026rsquo;s CIDR.\nClick on Edit inbound rules button in the Inbound rules tab. For rule number 100 select ALL ICMP - IPv4 as Type and enter VPC B\u0026rsquo;s CIDR of 10.1.0.0/16 for Source Click on Save The screen should return to the Network ACL page and the updated rule will display on the Inbound rules tab like below Verify the rule for Type, Protocol, Port and Source for the \u0026lsquo;ALLOW\u0026rsquo; rule 100. We have now completed modifying the default Network ACL of VPC A to allow ONLY ICMP traffic from VPC B\u0026rsquo;s CIDR and all other traffic will be denied by the catch-all DENY rule. Let us now test this from VPC B for ALLOW, and VPC C for DENY.\nNote that we have not modified outbound rules, and the default outbound rule allows ALL traffic to flow out of the subnet.\nTest Connectivity from VPC B to VPC A Here, we will login to the EC2 instance in VPC B using EC2 using Session Manager, and verify reachability to the EC2 instance in VPC A over ICMP (ping)\nClick on Instances in the EC2 Dashboard\nSelect the check box for VPC B Private AZ1 Server and click Connect button on the top right Click Connect in the Session Manager tab\nA new browser window opens with SSH connection to the instance in VPC B established and showing a command line prompt.\nType this following command in the prompt:\nping 10.0.1.100 -c 5 The ICMP traffic should flow through and return as shown below. We have now verified that the Network ACL on VPC A is allowing ICMP traffic to flow in and out from VPC B.\nTest Connectivity from VPC C to VPC A Now we will login to the EC2 instance in VPC C using EC2 using Session Manager, and check reachability to the EC2 instance in VPC A over ICMP (ping)\nTerminate the Session Manager connection to the EC2 Instance in VPC B\nIn the top left corner click Instances Select the check box for VPC C Private AZ1 Server and click Connect button on the top right Click Connect in the Session Manager tab\nA new browser window opens with SSH connection to the instance in VPC C established and showing a command line prompt.\nType this following command in the prompt:\nping 10.0.1.100 -c 5 The ICMP traffic should not flow through and not responses should be returned as shown below. The ping command will not generate a response because the Network ACL in VPC A is DENYING all ICMP traffic that does not originate from VPC B.\nTerminate the Session Manager connection We modified the default Network ACL in VPC A to allow ICMP traffic only from VPC B; the only other rule is a DENY ALL. We verified that ICMP traffic flows through from VPC B Private AZ1 Server to VPC A Private AZ1 Server but DID NOT flow through from VPC C Private AZ1 Server.\nRevert Changes In the VPC Dashboard click on Network ACLs Select the check box for VPC A Workload Subnets NACL Click on Edit inbound rules button in the above screen. Edit Rule 100 and select All traffic for Type enter a CIDR of 0.0.0.0/0 for Source Click on Save The screen should return to the Network ACL page and the updated rule will display like below in the Inbound rules tab Verify the rule for Type, Protocol, Port and Source for the \u0026lsquo;ALLOW\u0026rsquo; rule 100. Congratulations, you\u0026rsquo;ve completed this section on Network ACLs\nSecurity Groups Security Groups are virtual, stateful firewalls attached to an instance or network interface. Both inbound and outbound rules can be defined to allow specific protocols, ports and source/destination CIDR. A DENY is not possible with security groups.\nWith Security Groups, all rules are evaluated before a network packet is allowed or blocked, unlike Network ACLs where the rules are evaluated in order of rule number and once a rule matches subsequent rules are not evaluated.\nIn this exercise, we will modify the security group attached to VPC A Private AZ1 Server to allow only ICMP traffic inbound from VPC C\u0026rsquo;s CIDR only. We will verify that the EC2 instance in VPC C is able to ping the EC2 instance in VPC A, but that the EC2 instance in VPC B is not able to ping the same EC2 instance in VPC A.\nNote:\nIt is NOT best practice to have open Security Groups that allow everything (0.0.0.0/0).\nLimit access to what is required.\nModifying the Security Group in VPC A In the EC2 Dashboard click on Instances In the EC2 instance list, select the check box for VPC A Private AZ1 Server Scroll down to the Security tab and click on the Security Group link named something like sg-xxxxxxx (VPC A Security Group) In the Security Group page, click on the Inbound rules tab, and then click on Edit inbound rules button In the Edit inbound rules page, update the rule that is currently allowing ICMP from 0.0.0.0/0 to allow only from VPC C\u0026rsquo;s CIDR 10.2.0.0/16 Click Save rules Now we have modified the Security Group on the EC2 instance in VPC A allow ICMP traffic (ping traffic) only from sources in VPC C, and from nowhere else. We will now test to verify that we are NOT able to ping this instance from VPC B, and we are ABLE to ping from VPC C.\nTest Connectivity from VPC B to VPC A In the EC2 Dashboard click on Instances Select the check box for VPC B Private AZ1 Server from the list of instances, and click Connect button In the ‘Connect to instance’ dialogue click Connect in the Session Manager tab. This will open up a session in a browser window.\nIn the command line, try pinging the private IPv4 address of the EC2 instance in VPC A using the command\nping 10.0.1.100 -c 5 It will freeze and make no progress. This is because the Security Group on the EC2 instance in VPC A has inbound rules to only allow ICMP from VPC C. There are no rules for allowing VPC B, and an implicit DENY occurs.\nNow connect to the EC2 instance in VPC C and try to ping the EC2 instance in VPC A.\nTest Connectivity from VPC C to VPC A Terminate the Session Manager connection and click Instances Select the check box for VPC C Private AZ1 Server from the list of instances, and click Connect button\nIn the ‘Connect to instance’ dialog, click Connect in the Session Manager tab.\nIn the command line, try pinging the private IPv4 address of the EC2 instance in VPC A using the command\nping 10.0.1.100 -c 5 The ping will succeed and traffic will flow through. This is because the Security Group on the EC2 instance in VPC A is allowing ICMP traffic from VPC C\u0026rsquo;s CIDR range.\nTerminate the Session Manager connnection. We have modified the Security Group on the EC2 instance in VPC A to allow only ICMP traffic from VPC C. We tested and verified that we cannot ping this instance from VPC B, but we are able to ping it from VPC C confirming the behavior of the Security Group. Reverting Changes to the Security Group in VPC A In the EC2 Dashboard click on Instances In the EC2 instance list, select the check box for VPC A Private AZ1 Server Scroll down to the Security tab and click on the Security Group link named something like sg-xxxxxxx (VPC A Security Group) In the Security Group page, click on the Inbound rules tab, and then click on Edit inbound rules button In the Edit inbound rules page, update the rule that is currently allowing ICMP only from VPC C\u0026rsquo;s CIDR of 10.2.0.0/16 back to 0.0.0.0/0 Click Save rules Congratulations you have completed this section on Security Groups\nEndpoint Policies Endpoint policies are IAM policies attached to VPC endpoints to restrict/grant permission to the service\u0026rsquo;s API calls. For example, with an S3 endpoint, a policy can be attached to limit only read access to one or more S3 buckets from the VPC.\nVerify the permissions for the Gateway Endpoint Now let us now verify access to S3 and what actions are permitted from VPC A Private AZ1 Server.\nIn the EC2 console navigate to Instances Select the check box for instance VPC A Private AZ1 Server\nClick Connect and use \u0026ldquo;Session Manager\u0026rdquo; to open a command prompt\nIssue the command\naws s3 ls | grep networking-day Copy the name of the bucket beginning networking-day\nIssue the command aws s3 ls s3://\u0026lt;your-bucket-name\u0026gt; (replace with name of bucket you created) to check if we can list the contents of the bucket.\nCheck that the command was successful and no errors returned. The bucket is empty and hence it did not return any listing.\nLet us try to create a test file and upload to the S3 bucket.\nIssue the command below to create a new file\nsudo touch /tmp/test.txt Then attempt to copy to S3 by typing (replace with name of your bucket)\naws s3 cp /tmp/test.txt s3://\u0026lt;your-bucket-name\u0026gt; You will see that the command succeeds and the file is uploaded to the S3 bucket.\nConfirm the bucket contains the new file aws s3 ls s3://\u0026lt;your-bucket-name\u0026gt; (replace with name of bucket you created) Update VPC Endpoint policy document to remove permissions Let us now remove the permissions in the VPC Endpoint policy document that allow creating objects in the S3 bucket, and test it by attempting to upload a file to the bucket.\nNavigate to VPC Dashboard and click on Endpoints Select the Gateway Endpoint for S3 we created in the above steps. If you did not begin this lab at VPC Fundamentals, your VPC Endpoints will not have Name tags set, unlike the /images/2.week2/screenshot below that shows the names. Select the Gateway Endpoint for S3 based on the Endpoint with the Service Name ending in s3 and with the VPC ID ending in VPC A.\nIn the bottom frame, click on \u0026lsquo;Policy\u0026rsquo; tab, then click on the Edit Policy button In the policy editing screen,click on custom, enter the below policy document and click save. This policy removes s3:Put* permissions to the VPC Endpoint, effectively preventing instances from VPC A to upload objects to S3 buckets in the account.\n{ \u0026#34;Version\u0026#34;: \u0026#34;2008-10-17\u0026#34;, \u0026#34;Statement\u0026#34;: [ { \u0026#34;Sid\u0026#34;: \u0026#34;ReadWriteAccess\u0026#34;, \u0026#34;Effect\u0026#34;: \u0026#34;Allow\u0026#34;, \u0026#34;Principal\u0026#34;: \u0026#34;*\u0026#34;, \u0026#34;Action\u0026#34;: [ \u0026#34;s3:Get*\u0026#34;, \u0026#34;s3:List*\u0026#34; ], \u0026#34;Resource\u0026#34;: \u0026#34;*\u0026#34; } ] } Let us now try uploading the test file again by issuing the command aws s3 cp /tmp/test.txt s3://\u0026lt;your-bucket-name\u0026gt;\n(replace with name of bucket you created) to upload the file to the S3 bucket.\nNote that the command returned an \u0026lsquo;Access Denied\u0026rsquo; error message when trying to upload a file to the S3 bucket. This is because the Endpoint policy allows only Get* and List* actions, effectively making the S3 bucket read only, and all other actions are denied.\nConclusion We tested access to an S3 bucket through Gateway VPC Endpoint to S3, then we set the endpoint policy to allow only read actions; we tested that we can only list and get objects from the S3 bucket, and verified that put objects are denied by the endpoint policy showing that the VPC Endpoint policy is an effective mechanism to control allow/deny to service API calls from the VPC.\nClean Up If you are using your own AWS Account to conduct this workshop and you are finished, complete the follow steps to clean up.\nWarning\nYou should only complete this clean up section if you do not plan on continuing with this workshop.\nMake sure you terminate / delete the resources below to avoid unnecessary charges.\nPlease make a selection Option 1: You started this lab at the start\nOption 2: You started the lab in the Multi VPCs section by deploying the CloudFormation template\nOption 3: You started the lab in the Basic Security section by deploying the CloudFormation template\nFinished Once you have completed the above steps, you are finished. If you want to continue the workshop later, you can skip this step and use the CloudFormation template in the next step to build the prerequisites.\n"
},
{
	"uri": "//localhost:1313/2-week2/2.1-sovico/2.1.4-connectonpremises/",
	"title": "Connecting to On-Premises",
	"tags": [],
	"description": "",
	"content": "Please note, this module is optional and is not required to be completed to proceed with this workshop. You may skip to Network Monitoring\nAmazon Virtual Private Cloud (Amazon VPC) provides multiple options to integrate existing data center networks with your AWS VPCs, including AWS Managed Site-to-site (IPsec) VPNs and Direct Connect connections. AWS VPN connections provide up to 1.25gbps of throughput per tunnel. When used in conjunction with the Transit Gateway, AWS VPN supports Equal-Cost Multipathing (ECMP) to allow you to scale VPN throughput.\nIn this lab, we will be standing up a simulated data center environment and connecting it with the existing Transit Gateway that was set up in the \u0026ldquo;Multiple VPCs\u0026rdquo; lab. Recall that at the end of that lab, we had provisioned 3 AWS VPCs and EC2 instances in each VPC. The VPCs were interconnected using Transit Gateway.\nTo build out our simulated data center environment and connect it to our AWS environment, we will:\nDeploy a VPC containing a simulated datacenter environment, with DNS server and a simple web application. Establish VPN connectivity between the simulated datacenter and the AWS environment. Set up DNS resolution between the AWS environment and simulated datacenter. Test connectivity from the AWS environment to the simulated datacenter. If you are running this lab in AWS Workshop Studio, the region has been set by your facilitator. The region you see in /images/2.week2/screenshots may not match your environment. This will not cause any problems.\nIf you are running this lab in your own AWS Account, it is recommended for all lab resources to be created in us-east-1 region so that the /images/2.week2/screenshots match your environment. This is not mandatory.\nPrerequisites If you have not completed the Multiple VPCs sections\u0026hellip;\nDeploy VPC to simulate \u0026lsquo;On-Premises\u0026rsquo; Now we are ready to deploy a provided CloudFormation template a the simulated on-premises environment. This stack will create a VPC that will act as our on-premises environment with a public and private subnet as well as the three EC2 instances for a Customer Gateway Server, DNS Server, and Application Server.\nLoad the following CloudFormation template:\nCloudFormation Template\nEnter the Stack name NetworkingWorkshopOnPremisesVPC\nUpdate ParticipantIPAddress and then accept the remaining default values in Configure stack options\nClick on Next\nClick on Create stack\nWait for the stack to be created. This can take up to 10 minutes.\nImportant\nIf the deployment of the CloudFormation template fails due to the Elastic IP address limit being reached and you are using your own AWS account, please refer to the Elastic IP Quota section in Prerequisites - Your own AWS Account.\nNow we are ready to create the VPN connection between AWS and the on-premise Customer Gateway\nEstablish VPN Connection In the earlier Multiple VPCs lab we created a Transit Gateway to interconnect our the VPCs. To integrate the simulated datacenter environment, we will establish a VPN connection between the Transit Gateway and a customer gateway device at the datacenter. Since this is a simulated environment, we will use OpenSWAN running on an EC2 host as the Customer Gateway.\nCreate TGW VPN Attachment First, we need to capture the Public IP of the Customer Gateway that we will need in a later step.\nIn the EC2 Dashboard navigate to Instances Select the check box beside the On Premise Customer Gateway EC2 instance and copy down the Public IPv4 address\nNow we can create the VPN attachment on the Transit Gateway.\nIn the VPC dashboard navigate to Transit Gateway Attachments Click Create transit gateway attachment Under Transit gateway ID select the Immersion Day TGW\nChange Attachment type to VPN\nUnder Customer Gateway select New\nFor IP address, enter the Public IP of the On Premise Customer Gateway EC2 instance that you captured in a previous step.\nChange the Routing Options to Static routing.\nLeave all other settings at their defaults. Click Create transit gateway attachment\nCreate Site-to-Site VPN Connection Remain in the Transit Gateway Attachments dashboard and wait for the newly created VPN connection to transition to the available status. Scroll down to the details tab and click on the Resource ID for the Site-to-Site VPN (starting with vpn-)\nIn the resulting screen, select the check box next to the VPN and click on the Tunnel details tab. Write down the two Outside IP addresses, you will need these at a later step. Click Download configuration\nSelect Openswan for the vendor.\nClick Download and save the downloaded file for later.\nClick Cancel to close the window.\nCreate a new Transit Gateway Route Table for the VPN The new VPN connection needs to be associated to a transit gateway route table. Since none of the existing ones are suitable (they do not have all the VPCs routes), we will create a new one.\nIn the VPC console navigate to Transit Gateway Route Tables Click Create transit gateway route table\nEnter the name VPN Route Table and select the Transit gateway ID.\nClick Create transit gateway route table\nDelete VPN Attachment from Transit Gateway default Route Table ](https://catalog.us-east-1.prod.workshops.aws/event/dashboard/en-US/workshop/foundational/on-premises/create-vpn#delete-vpn-attachment-from-transit-gateway-default-route-table)\nWhen we created the transit gateway, we left the option Default route table association enabled. This means that when we created the VPN attachment, it was automatically associated with the transit gateways default route table. Before we associate the VPN attachment to the new VPN route table, we have to disassociate it from the default route table.\nIf you started this workshop after the Multiple VPCs section, you do not need to complete this step. Default route table association is not enabled in the NetworkingWorkshopMultiVPCandTGW CloudFormation template deployed in the Security Controls or Connecting to On-Premises prerequisites sections.\nNavigate back to Transit Gateway Route Tables or remove the Transit gateway route table ID: filter. Select the check box for the TGW default route table and scroll down to the Associations tab Select the association with the resource type VPN and click Delete association Confirm the deletion by clicking Delete Association on the following screen The association will move into disassociating state. Associate the VPN attachment to the new Transit Gateway Route Table Select the new VPN Route Table and click Associations tab. Click Create association\nSelect the VPN attachment from the list and click Create association\nClick Propagations tab and click Create propagation\nSelect the VPC A attachment and click Create propagation. Repeat this step for VPC B and VPC C.\nThe VPN connection is now associated to this route table, and has the ability to route to VPC A, B, and C.\nUpdate Route Tables with On-Premise CIDR Update Transit Gateway Route Table Since we are using static routing for our VPN connection, we need to manually create a route in the Transit Gateway route table to route traffic to the on-premise CIDR block via the new VPN attachment.\nIn the VPC console navigate to Transit Gateway Route Tables Select the check box for the Transit Gateway\u0026rsquo;s Shared Services Route Table route table and then select the Routes tab in the lower pane.\nClick Create static route to add a new static route.\nEnter the CIDR block for the simulated data center environment 172.16.0.0/16 and select the new VPN attachment. There should be 3 attachments of type VPC and one of type VPN.\nClick Create static route\nIt will initially be created with a route state of \u0026lsquo;Blackhole\u0026rsquo; because we have yet to establish the VPN connection to the on-premise environment.\nRepeat these steps to update the Default Route Table so that it also has a route to the simulated data center environment.\nUpdate VPC A Route Table Now that we have a Transit Gateway Attachment through which to send traffic to our on-premises network we need to add routes from our AWS VPCs to the Transit Gateway for the on-premise CIDR block. For the purposes of this lab you\u0026rsquo;re only going to add an entry to the private route table for VPC A.\nIn the VPC Dashboard navigate to Route Tables Select the check box next to VPC A Private Route Table and scroll down to the Routes tab and click on Edit routes Add a route for 172.16.0.0/16 toward Transit Gateway VPC A Attachment. Under Target select Transit Gateway and then choose the VPC A Attachment. Click Save changes\nVPC A will now have the ability to route to the simulated on-premesis environment\nPlease repeat this step for the VPC B and VPC C Private Route Tables.\nThere is no need to configure the routing in the on-premesis VPC. This was configured for you in the on-premesis CloudFormation template.\nUpdate the customer gateway EC2 instance\u0026rsquo;s security group We will need to allow the AWS VPN endpoints to communicate with the On Premise Customer Gateway EC2 instance over IPSEC.\nIn the EC2 Dashboard navigate to Instances Select the check box beside the On Premise Customer Gateway EC2 instance, click the Security tab, and then click the On-Premises Customer Security Group. Click Edit inbound rules Click Add rule four times. Add rules for UDP ports 500 and 4500 for the two tunnel \u0026ldquo;outside\u0026rdquo; addresses you noted when creating the VPN connection above. The dialog requires you to enter the addresses in CIDR notation, so simply append /32 to the end of the two tunnel IP addresses. Click Save Rules when done. Configure OpenSWAN and bring up the tunnel Now that we have configured the simulated datacenter VPC and created the VPN connection to the Transit Gateway, we are ready to configure OpenSWAN on the Customer Gateway and bring up the tunnel. OpenSWAN has already been installed on the host during deploymennt and we will use the configuration file downloaded previously to configure the VPN. Since OpenSWAN does not provide built-in tunnel failover capability, we will only be configuring one of the tunnels.\nOpen the configuration file that you downloaded from the VPC console for the customer gateway in a text editor. We will be following this file to configure OpenSWAN for Tunnel 1. In the EC2 Dashboard navigate to Instances Select the check box beside the On Premise Customer Gateway EC2 instance and click Connect Click Connect on the Session manager tab to open a shell. Create an aws.conf file in /etc/ipsec.d: sudo vim /etc/ipsec.d/aws.conf Enter i to edit in vim.\nPrevious way of configuring OpenSWAN\nNew way of configuring OpenSWAN\nCopy and paste the following configuration. Modify X.X.X.X with your specific gateway IP address and Y.Y.Y.Y with your specific tunnel 1 IP addresses. You can get these IP addresses from the configuration file that you downloaded in Create Site-to-Site VPN Connection.\nconn Tunnel1 authby=secret auto=start left=%defaultroute leftid=X.X.X.X right=Y.Y.Y.Y type=tunnel ikelifetime=8h keylife=1h phase2alg=aes_gcm ike=aes256-sha2_256;dh14 keyingtries=%forever keyexchange=ike leftsubnet=172.16.0.0/16 rightsubnet=10.0.0.0/14 dpddelay=10 dpdtimeout=30 dpdaction=restart_by_peer Enter esc and :wq! to save the updates and exit vim.\nCreate an aws.secrets file in /etc/ipsec.d\nsudo vim /etc/ipsec.d/aws.secrets Copy and paste the pre-shared secret line from Step 5 of the instructions into the secrets file. Enter esc and :wq! to save the update to aws.secrets and exit vim.\nEnable and start OpenSWAN:\nsudo systemctl enable ipsec.service sudo systemctl start ipsec.service sudo ipsec status The output should end with lines indicating an authenticate IPsec SA and three lines indicating the tunnel details AWS VPN connections are only brought up from the customer-side when using IKEv1, so we will need to send some traffic to one of our AWS VPCs from the simulated OnPrem environment.\nFrom the Customer Gateway ping the private IP address of the EC2 instance in the private subnet in VPC A:\nping 10.0.1.100 Note that it may take up to 30 seconds before the tunnel comes up and you start seeing ping responses.\nEnter CTL C to kill the ping command and terminate the Session Manager connection.\nCongratulations you\u0026rsquo;ve just connected the on-premises environment to AWS via a Site-to-Site VPN attached to the Transit Gateway\nExplore Hybrid Environment Now we are ready to explore the simulated on-premises environment. Explore the simulated datacenter environment We\u0026rsquo;ve now launched a simulated datacenter environment that consists of a customer gateway, a web application server, and a DNS server. Let\u0026rsquo;s make sure that the components are working before we move on to connecting this to our AWS environment.\nOn the Customer Gateway instance check which DNS server the host is using by examining the /etc/resolv.conf file.\ncat /etc/resolv.conf Take note of the \u0026ldquo;nameserver\u0026rdquo; line, which should point to 172.16.1.200 which is the IP address of the on premise DNS Server created by CloudFormation template rather than the default VPC name server on 172.16.0.2.\nsh-4.2$ cat /etc/resolv.conf ; generated by /usr/sbin/dhclient-script search example.corp options timeout:2 attempts:5 nameserver 172.16.1.200 Test the application server. In our simulated datacenter environment, we use the internal domain name example.corp and the application server has a hostname entry for myapp.example.corp created in the DNS server. We can test that the application server is up and running by using the curl command:\ncurl http://myapp.example.corp If your application server is working properly, you will see a response of \u0026ldquo;Hello, world.\u0026rdquo;\nsh-4.2$ curl http://myapp.example.corp Hello, world. Terminate the Session Manager connection.\nTest the VPN connection from AWS to the simulated datacenter network. Now that our VPN tunnel is up, we can test connectivity from the AWS environment, via the Transit Gateway, to our simulated on-premises environment. Recall that our on-premises environment contains an application server and a DNS server. The application server has a DNS A record in the on-premises DNS server for the myapp.example.corp hostname. In this section, we will verify connectivity between the AWS and simulated datacenter environments and test that we can connect to the application server.\nIn the EC2 Dashboard select Instances Select the check box next to VPC A Private AZ1 Server and click Connect to start a Session Manager console\nTest connectivity to the on premise application server\u0026rsquo;s private IP address of 172.16.1.100\nping 172.16.1.100 -c 5 sh-4.2$ ping 172.16.1.100 -c 5 PING 172.16.1.100 (172.16.1.100) 56(84) bytes of data. 64 bytes from 172.16.1.100: icmp_seq=1 ttl=253 time=2.90 ms 64 bytes from 172.16.1.100: icmp_seq=2 ttl=253 time=2.28 ms 64 bytes from 172.16.1.100: icmp_seq=3 ttl=253 time=2.07 ms 64 bytes from 172.16.1.100: icmp_seq=4 ttl=253 time=2.17 ms 64 bytes from 172.16.1.100: icmp_seq=5 ttl=253 time=2.28 ms --- 172.16.1.100 ping statistics --- 5 packets transmitted, 5 received, 0% packet loss, time 4005ms rtt min/avg/max/mdev = 2.077/2.345/2.909/0.293 ms Test the application server using curl:\ncurl http://172.16.1.100 If your VPN connection is functioning correctly, this command will return \u0026ldquo;Hello, world.\u0026rdquo; from the application server.\nsh-4.2$ curl http://172.16.1.100 Hello, world. Next let\u0026rsquo;s verify that the AWS EC2 instances can reach the on-premises DNS server if we query it directly by using the IP address and the dig command to query for myapp.example.corp:\ndig @172.16.1.200 myapp.example.corp Your query should return an A record for the on-premises application server, similar to the following:\n; \u0026lt;\u0026lt;\u0026gt;\u0026gt; DiG 9.11.4-P2-RedHat-9.11.4-26.P2.amzn2.5.2 \u0026lt;\u0026lt;\u0026gt;\u0026gt; @172.16.1.200 myapp.example.corp ; (1 server found) ;; global options: +cmd ;; Got answer: ;; -\u0026gt;\u0026gt;HEADER\u0026lt;\u0026lt;- opcode: QUERY, status: NOERROR, id: 2272 ;; flags: qr aa rd ra; QUERY: 1, ANSWER: 1, AUTHORITY: 1, ADDITIONAL: 2 ;; OPT PSEUDOSECTION: ; EDNS: version: 0, flags:; udp: 4096 ;; QUESTION SECTION: ;myapp.example.corp. IN A ;; ANSWER SECTION: myapp.example.corp. 60 IN A 172.16.1.100 ;; AUTHORITY SECTION: example.corp. 86400 IN NS ns1.example.corp. ;; ADDITIONAL SECTION: ns1.example.corp. 60 IN A 172.16.1.200 ;; Query time: 7 msec ;; SERVER: 172.16.1.200#53(172.16.1.200) ;; WHEN: Tue Sep 21 05:01:56 UTC 2021 ;; MSG SIZE rcvd: 97 Test the application server by using the hostname in the curl request:\ncurl http://myapp.example.corp This should fail. We will receive an error message \u0026ldquo;Could not resolve host\u0026rdquo; because DNS has not yet been configured to allow the AWS instances to resolve names hosted on the datacenter\u0026rsquo;s DNS server.\nsh-4.2$ curl http://myapp.example.corp curl: (6) Could not resolve host: myapp.example.corp Terminate the Session Manager connection.\nCongratulations you\u0026rsquo;ve shown that there is connectivity in place from AWS to both the application server and DNS instance running in the on-premise environment. We will address hybrid-DNS in the next section that will allow DNS resolution of on-premise hosts from AWS.\nHybrid DNS Route 53 Resolver makes hybrid cloud easier for enterprise customers by enabling seamless DNS query resolution across your entire hybrid cloud. You can create DNS endpoints and conditional forwarding rules to allow resolution of DNS namespaces between your on-premises data center and AWS VPCs.\nRecall that our simulated on-premises datacenter has a DNS server, providing authoritative name service for the example.corp domain where all internal application hosts are registered. In order to provide a complete hybrid-connectivity solution, we want to enable hosts in our AWS VPCs to resolve names of hosts in the datacenter environment. This can be achieved using Route 53 resolvers and conditional forwarding rules for the example.corp domain, while allowing the AWS instances to continue to take advantage of the highly available Amazon DNS service for all other name resolution inside the VPC and the internet.\nFor this exercise, we will focus on establishing DNS resolution from the AWS environment to the simulated datacenter, but it\u0026rsquo;s important to note that the reverse is possible as well. Route 53 Resolvers supports inbound DNS queries that are conditionally forwarded from an on-premises DNS server. You can learn more about inbound DNS resolution in the AWS documentation .\nConfigure a Route 53 Resolver Outbound Endpoint Route 53 Resolver uses endpoints to communicate with external DNS servers. An endpoint is an Elastic Network Interface (ENI) placed inside of a VPC which has connectivity to the existing DNS server. This may be a DNS server running on an EC2 instance, or a DNS server running on-premises accessible via Direct Connect or VPN. Since all three VPCs in our AWS environment have connectivity to the simulated datacenter via the Transit Gateway, we can use any of them for our endpoint. The endpoint will create interfaces in a minimum of two availability zones in your chosen VPC for high availability.\nNavigate to Route 53 , Expand the hamburger on the top left and Under Resolver select Outbound endpoints If you have not been to the Route 53 Resolver console before, it will take you to a splash page that you see in the /images/2.week2/screenshot above. Under Resolver on the left menu, select Outbound endpoints again to take you to the screen you see in the /images/2.week2/screenshot below. You want to see the button Create outbound endpoint not Configure endpoints\nClick Create outbound endpoint. Configure the settings for the outbound endpoint as follows:\nEndpoint name: NetworkingDayOutbound VPC in the Region: Select VPC A Security group for this endpoint: Select the default Security Group for your VPC A, which already contains a rule permitting outbound connectivity. Endpoint type: Select IPv4 IP address #1: Availability zone: Choose us-east-1a Subnet: VPC A Private Subnet AZ1. IP address: Use an IP address that is selected automatically IP address #2: Availability zone: us-east-1b Subnet: VPC A Private Subnet AZ2. IP address: Use an IP address that is selected automatically Click Submit to create the endpoint.\nWait for the endpoint status to change to Operational. Then proceed to the next step.\nCreate a Route 53 Resolver rule for example.corp. Now that we have created an outbound endpoint this provides the Route 53 Resolver with a path to the on premise DNS server via VPC A and the Transit Gateway\u0026rsquo;s VPN connection. Next we need to configure a Route 53 Resolver Rule to direct queries for example.corp to the on premise DNS server via that endpoint. We will associate the rule with VPC\u0026rsquo;s A, B, and C and this will cause Route 53 Resolver to use this rule whenever the VPC DNS resolver processes queries for example.corp from instances in any of those three VPCs.\nWhile still in the Route 53 console, navigate to the Rules tab under Resolver\nSelect Create rule Provide configuration for the rule:\nSet Name as NetworkingDayRule Leave Rule type as Forward Specify the Domain name as example.corp. Associate the rule with all three of your AWS VPCs: VPC A, VPC B, and VPC C. For Outbound endpoint choose the endpoint you created in the previous step: NetworkingDayOutbound Under Target IP addresses enter the on-premise DNS server IP address: 172.16.1.200 Click Submit to create the rule.\nTesting the Route 53 Resolver rule At this point, we have configured Route 53 resolver to forward queries to the datacenter\u0026rsquo;s DNS server for the example.corp domain from any of the AWS VPC\u0026rsquo;s A, B, or C. We can test name resolution by attempting to connect to the on-premises app server from one of the EC2 instances in our AWS VPCs.\nIn the EC2 console navigate to Instances Select the check box next to VPC B Private AZ1 Server and click the Connect button above.\nOn the Session manager tab click Connect to open a command prompt\nCheck setting of the DNS server on the instance by examining resolv.conf:\ncat /etc/resolv.conf Note that the instance is using the AWS provided DNS server (e.g. 10.1.0.2) and not your on-premises DNS server for name resolution:\nnameserver 10.1.0.2 search ec2.internal Check that the hostname for myapp.example.corp resolves to an IP address:\nnslookup myapp.example.corp Note that the instance is using the AWS provided DNS server (e.g. 10.1.0.2) and not your on-premises DNS server for name resolution:\nnslookup myapp.example.corp Server: 10.1.0.2 Address: 10.1.0.2#53 Non-authoritative answer: Name: myapp.example.corp Address: 172.16.1.100 Use curl to query the on-premises application server by its hostname, myapp.example.corp\ncurl http://myapp.example.corp If name resolution and your application server are functioning, you will receive back a \u0026ldquo;Hello, world\u0026rdquo; response.\ncurl http://myapp.example.corp Hello, world. Terminate the Session Manager connection.\nCongratulations, you\u0026rsquo;ve established hybrid DNS that allows hostnames managed by the on-premises DNS server to be resolved from AWS hosts\nClean Up If you are using your own AWS Account to conduct this workshop and you are finished, complete the follow steps to clean up.\nWarning\nYou should only complete this clean up section if you do not plan on continuing with this workshop.\nMake sure you terminate / delete the resources below to avoid unnecessary charges.\nDelete Site-to-Site VPN Delete the On-Premises VPC Delete Route53 Resolver Endpoints Continue deleting resources. Please make a selection: Option 1: You started this lab at the start\nOption 2: You started the lab in the Multi VPCs section by deploying the CloudFormation template\nOption 3: You started the lab in the Basic Security or On-Premises section by deploying the CloudFormation template\nFinished Once you have completed the above steps, you are finished. If you want to continue the workshop later, you can skip this step and use the CloudFormation template in the next step to build the prerequisites.\n"
},
{
	"uri": "//localhost:1313/1-week1/1.4-lab9/",
	"title": "Lab 9",
	"tags": [],
	"description": "",
	"content": ""
},
{
	"uri": "//localhost:1313/2-week2/2.1-sovico/2.1.5-networkmonitoring/",
	"title": "Network Monitoring",
	"tags": [],
	"description": "",
	"content": "In this section, you will utilize the three VPC’s with Internet Gateways, Transit Gateway, and EC2 instances that were created in the Multiple VPCs lab. You will set up VPC Flow logs for VPC A, generate some traffic, and then view the logs in CloudWatch.\nCloudWatch Amazon CloudWatch is a metrics repository. AWS services send metrics into the repository, and you retrieve statistics based on those metrics.\nIn this section, you will review some of the Networking metrics available in CloudWatch, create a dashboard to view a set of metrics on one page and set up an alarm on a threshold breach.\nReview Automatic Dashboards Amazon CloudWatch dashboards are customizable home pages in the CloudWatch console that you can use to monitor your resources in a single view, even those resources that are spread across different Regions. You can use CloudWatch dashboards to create customized views of the metrics and alarms for your AWS resources.\nNavigate to the CloudWatch console Click Dashboards, then click Automatic Dashboards and VPC NAT Gateways\nA dashboard will be shown that contains the key network metrics for NAT Gateways\nReview the metrics\nCreate Custom Dashboard Amazon EC2 provides instance-level metrics that measure CPU, disk, and network performance. These metrics include bytes and packets in/out and collected by default and can be viewed in Amazon CloudWatch. Amazon EC2 has recently announced additional high-resolution instance level network performance metrics for Elastic Network Adapter (ENA). With these new metrics you can gain insights into traffic drops when network allowances are exceeded. For more information, please see Amazon EC2 instance-level network performance metrics uncover new insights In this section we will review the Network metrics in CloudWatch for the VPC A Private AZ1 Server instance in VPC A and create a custom dashboard with a widget showing the NetworkIn and NetworkOut metrics and another widget for the NetworkPacketsIn and NetworkPacketsOut metrics.\nNavigate to the CloudWatch console Under the All Metrics tab in the main screen click on EC2\nClick on Per-Instance Metrics.\nFilter the list for metrics with network in the name by entering network in the search\nSelect the metric NetworkIn and NetworkOut for the VPC A Private AZ1 Server\nClick on the pencil icon at the top left corner of the graph and enter a name of VPC A Private AZ1 Server Network In/Out Click on Actions and select Add to dashboard from the dropdown\nClick on Create new\nEnter NetworkingWorkshopEC2 and click Create\nClick Add to dashboard\nThe graph of Network In/Out statistics in bytes for the EC2 instance will be added to a new dashboard. To add Packets In/Out statistics click on the + in the top right corner to add another widget\nIn the Add Widget screen select Number\nClick on EC2\nClick on Per-Instance Metrics\nEnter NetworkPackets in the Search box and select the two lines for VPC A Private AZ1 Server and click Create Widget\nThe new widget will then be placed on your dashboard, click Save to persist the dashboard. Create Alarm You can create a CloudWatch alarm that monitors CloudWatch metrics for a given AWS service. CloudWatch will automatically send you a notification when the metric reaches a threshold you specify.\nIn this section you will create an alarm that monitors the amount of traffic received by an EC2 instance and sends an email notification if a threshold is breached.\nIn the CloudWatch console navigate to All alarms and click on Create alarm\nClick Select metric\nClick on EC2\nClick on Per-instance Metrics\nEnter NetworkIn in the search box and hit enter.\nSelect the checkbox for VPC B Private AZ1 Server and click Select metric\nIn the resulting Specify metric and conditions screen change the Statistic and Period fields to Maximum and 1 minute respectively.\nIn the Conditions section below, enter a threshold value of 1000000 and click Next\nIn the Configure actions screen click on Add notification\nSelect Create new topic, enter NetworkingWorkshopAlarmTopic as the name, enter your email and click Create topic\nScroll to the bottom of the page, click Next and on the resulting screen\nEnter NetworkingWorkshopAlarm as the Alarm name Click Next Review the values on the Preview and create screen and click Create alarm\nThe alarm will be created but the \u0026ldquo;State\u0026rdquo; of the alarm may show \u0026ldquo;Insufficient data\u0026rdquo;. This will happen until enough data points are received by the alarm.\nUnder Actions there will be a warning for \u0026ldquo;Pending confirmation\u0026rdquo; which means that you have not confirmed the email subscription to SNS yet.\nGo into your email, open the new message from \u0026ldquo;AWS Notifications\u0026rdquo; and confirm the subscription. This will be required to ensure you receive the notification.\nIn the next section you will get the opportunity to trigger the alarm and test the notification that you configured.\nVPC Flow Logs VPC Flow Logs is a feature that enables you to capture information (metadata) about the IP traffic going to and from network interfaces in your VPC. For example, if you have a content delivery platform, flow logs can profile, analyze, and predict customer patterns of the content access, and track down top talkers and malicious calls.\nCreate Flow Log Create a flow log for all traffic in VPC A and save it to the destination log group NetworkingWorkshopFlowLog.\nCreate CloudWatch Log group First, let’s create a CloudWatch Log group to store flow logs in:\nNavigate to the CloudWatch Console In the menu on the left, click Log groups under Logs and click Create log group in the top right\nEnter NetworkingWorkshopFlowLogsGroup as Log group name and click Create\nCreate VPC Flow log In the VPC Dashboard navigate to Your VPCs Select VPC A, scroll down to the Flow Logs tab and click on Create flow log\nIn the resulting Flow log settings section\nEnter NetworkingWorkshopFlowLog in the Name field Set Filter to All Set Maximum aggregation interval to 1 minute Leave Destination as Send to CloudWatch Logs Set Destination log group as NetworkingWorkshopFlowLogsGroup Select NetworkingWorkshopFlowLogsRole from the IAM role dropdown (this IAM role was created by the workshop\u0026rsquo;s base CloudFormation template) Click on Create flow log\nYou completed setup of the VPC flow logs.\nGenerate Traffic IP traffic going to and from network interfaces in VPC A is now being collected in CloudWatch. Generate some traffic between the VPC A Private AZ1 Server Amazon EC2 instance in VPC A, and the VPC B Private AZ1 Server instance in VPC B using iperf (a widely used tool for network performance measurement and tuning).\nAfter generating the traffic, continue to the next step to view the flow log in CloudWatch.\nReview Security Group for EC2 instance in VPC B A Security Group rule for the Amazon EC2 instance in VPC B has been created for you to allow the iperf server to receive incoming traffic.\nIn the EC2 Dashboard navigate to Instances Select the check box next to the VPC B Private AZ1 Server instance, scroll down and click on the Security tab below and click on the Security groups link for sg-xxxxxxxx (VPC B Security Group)\nIn the Security Group screen that opens scroll down to the Inbound rules tab and confirm that port 5201 is open for TCP traffic from 10.0.0.0/8\nInstall and run iperf3 server on EC2 instance in VPC B In the EC2 Dashboard navigate to Instances Select the check box next to the VPC B Private AZ1 Server instance, click Connect\nClick Connect again in the Session Manager tab to open a command prompt\nInstall and start the iperf server on the EC2 instance in VPC B:\nsudo dnf install iperf3 -y \u0026amp;\u0026amp; iperf3 -s Leave the Session Manager browser tab open, switch back to the Connect to instance tab and click on the Instances link Select the check box next to the VPC A Private AZ1 Server instance, and click Connect Click Connect again in the Session Manager tab to open a command prompt Install iperf and set up a TCP transfer with 2 parallel streams for 30 seconds to the EC2 instance in VPC B.\nsudo dnf install iperf3 -y \u0026amp;\u0026amp; iperf3 -c 10.1.1.100 -P 2 -t 30 Connecting to host 10.1.1.100, port 5201 [ 4] local 10.0.1.100 port 37860 connected to 10.1.1.100 port 5201 [ 6] local 10.0.1.100 port 37862 connected to 10.1.1.100 port 5201 [ ID] Interval Transfer Bandwidth Retr Cwnd [ 4] 0.00-1.00 sec 64.9 MBytes 544 Mbits/sec 18 429 KBytes [ 6] 0.00-1.00 sec 57.5 MBytes 482 Mbits/sec 16 380 KBytes [SUM] 0.00-1.00 sec 122 MBytes 1.03 Gbits/sec 34 - - - - - - - - - - - - - - - - - - - - - - - - - [ 4] 1.00-2.00 sec 59.6 MBytes 500 Mbits/sec 15 322 KBytes [ 6] 1.00-2.00 sec 59.0 MBytes 495 Mbits/sec 25 256 KBytes [SUM] 1.00-2.00 sec 119 MBytes 994 Mbits/sec 40 - - - - - - - - - - - - - - - - - - - - - - - - - [ 4] 2.00-3.00 sec 64.6 MBytes 542 Mbits/sec 20 330 KBytes [ 6] 2.00-3.00 sec 55.4 MBytes 465 Mbits/sec 23 223 KBytes [SUM] 2.00-3.00 sec 120 MBytes 1.01 Gbits/sec 43 - - - - - - - - - - - - - - - - - - - - - - - - - [ 4] 3.00-4.00 sec 49.6 MBytes 416 Mbits/sec 25 280 KBytes [ 6] 3.00-4.00 sec 69.3 MBytes 581 Mbits/sec 15 272 KBytes [SUM] 3.00-4.00 sec 119 MBytes 998 Mbits/sec 40 - - - - - - - - - - - - - - - - - - - - - - - - - ... - - - - - - - - - - - - - - - - - - - - - - - - - [ 4] 28.00-29.00 sec 59.7 MBytes 501 Mbits/sec 13 396 KBytes [ 6] 28.00-29.00 sec 54.9 MBytes 460 Mbits/sec 14 330 KBytes [SUM] 28.00-29.00 sec 115 MBytes 961 Mbits/sec 27 - - - - - - - - - - - - - - - - - - - - - - - - - [ 4] 29.00-30.00 sec 62.9 MBytes 528 Mbits/sec 11 330 KBytes [ 6] 29.00-30.00 sec 51.4 MBytes 431 Mbits/sec 17 289 KBytes [SUM] 29.00-30.00 sec 114 MBytes 959 Mbits/sec 28 - - - - - - - - - - - - - - - - - - - - - - - - - [ ID] Interval Transfer Bandwidth Retr [ 4] 0.00-30.00 sec 1.78 GBytes 508 Mbits/sec 412 sender [ 4] 0.00-30.00 sec 1.77 GBytes 508 Mbits/sec receiver [ 6] 0.00-30.00 sec 1.66 GBytes 474 Mbits/sec 441 sender [ 6] 0.00-30.00 sec 1.66 GBytes 474 Mbits/sec receiver [SUM] 0.00-30.00 sec 3.43 GBytes 983 Mbits/sec 853 sender [SUM] 0.00-30.00 sec 3.43 GBytes 982 Mbits/sec receiver iperf Done. When iperf completed with an iperf Done. message, terminate the Session Manager connection on the VPC A instance and switch to the Session Manager tab for the connection to the VPC B instance and terminate that session too. You have successfully generated traffic between the two instances. The next step is to view the flow log in CloudWatch.\nView Flow Logs in CloudWatch When publishing to CloudWatch, flow log data is published to a log group, and each network interface has a unique log stream in the log group. Log streams contain flow log records. You can create multiple flow logs that publish data to the same log group.\nIn the EC2 Dashboard, navigate to Instances Select the checkbox next to VPC A Private AZ1 Server, scroll down to the Networking tab and make a note of the Interface ID under Network Interfaces\nVPC Flow logs can be sent to either an Amazon S3 bucket or CloudWatch. In this lab, you configured the flow logs from VPC A to be sent to CloudWatch.\nNavigate to Log Groups in the CloudWatch console and click on the NetworkingWorkshopFlowLogsGroup log group\nClick on the log stream matching the interface ID noted in step (1) to see the flow records for that interface (make sure to select the ENI from VPC A EC2)\nClick on any entry to expand the log line\nAnatomy of a flow log: Query Flow Log for Insights CloudWatch Logs Insights enables you to interactively search and analyze log data in CloudWatch Logs, including VPC flow logs. You can perform queries to help you more efficiently and effectively respond to operational issues. In the section you will run a query to show the top 10 talkers based on bytes transferred.\nIn the CloudWatch console click on Logs Insights\nSelect NetworkingWorkshopFlowLogsGroup from the Select log group(s) dropdown and click the Queries folder on the right hand side\nClick Top 10 byte transfers by source and destination IP addresses under VPC Flow Logs, click Apply and then Run query\nReview the query results. Do you recognize the top two IP addresses?\nCheck Alarm Notification Generating traffic to the instance in VPC B via iperf should have triggered the alarm we created earlier.\nOpen the inbox for the email destination you configured for the alarm and check that an email notification has arrived.\nClean Up If you are using your own AWS Account to conduct this workshop and you are finished, complete the follow steps to clean up.\nWarning\nYou should only complete this clean up section if you do not plan on continuing with this workshop.\nMake sure you terminate / delete the resources below to avoid unnecessary charges.\nDelete CloudWatch Alarm Delete the FlowLog Cloudwatch Log Group Delete CloudWatch Dashboard Please make a selection: Option 1: You started this lab at the start\nOption 2: You started the lab in the Multi VPCs section by deploying the CloudFormation template\nOption 3: You started the lab in the Basic Security section by deploying the CloudFormation template\nFinished Once you have completed the above steps, you are finished. If you want to continue the workshop later, you can skip this step and use the CloudFormation template in the next step to build the prerequisites.\n"
},
{
	"uri": "//localhost:1313/categories/",
	"title": "Categories",
	"tags": [],
	"description": "",
	"content": ""
},
{
	"uri": "//localhost:1313/tags/",
	"title": "Tags",
	"tags": [],
	"description": "",
	"content": ""
}]